create_package <- function(name){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# create the package structure
create(name)
move_to_package(name)
# create the test structure in the package
devtools::use_testthat()
}
update_package <- function(name, dependencies, testing=FALSE){
move_to_package(name)
# add dependecies
sapply(dependencies, devtools::use_package)
# generate the documentation
document()
if(testing){
# run the tests
devtools::test()
}
# go back to the script folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# install the package
install(name)
}
outlier_dependencies <- c(
"psych",
"assertive",
"data.table",
"fields",
"parallel",
"mpmi",
"ape",
"igraph",
"R.matlab",
"caret",
"ldbod"
,"Rlof"
)
validation_dependencies <- c(
"igraph",
"pROC"
)
# install the packages
update_package("outliers", outlier_dependencies)
update_package("validation", validation_dependencies)
# load the packages
library("outliers")
library("validation")
# Compute the scores for all the files and save the results in the data directory
compute_scores<-function(files, base_detector_methods, data_folder, result_folder, preprocess_method, bagging_method, timeout_bag=5*60, timeout_meth=25*60, only_missing){
for(file in files){
dir <- join(c(result_folder, file, "/"))
dir.create(result_folder, showWarnings = FALSE)
dir.create(dir, showWarnings = FALSE)
load(paste(data_folder, file, ".Rda", sep=""))
preprocessed_x = preprocess_method(data$x)
print(file)
bagging = outliers::timeout(outliers:::feature_bagging, list(data=preprocessed_x, bagging=bagging_method), timeout = timeout_bag)
for(detector_name in names(base_detector_methods)){
compute <- !(only_missing & file.exists(join(c(dir, file, "_",detector_name,".Rda"))))
print(c(compute, Sys.time(), join(c(dir, file, "_",detector_name,".Rda"))))
if(compute){
if(any(is.na(bagging))){
result = list("tdelta"= timeout_bag, "fresult"= rep(NA, nrow(preprocessed_x)))
}else{
r = matrix(0, nrow = nrow(bagging), ncol =nrow(preprocessed_x) )
t = 0
for(i in 1:nrow(bagging)){
feat = bagging[i,]
result <- outliers::timeout(validation:::benchmark, list(base_detector_methods[[detector_name]], list(preprocessed_x[,feat[feat > 0]])), timeout = timeout_meth)
if(any(is.na(result))){
result = list("tdelta"= timeout_meth, "fresult"= rep(NA, nrow(preprocessed_x)))
}
r[i,] = result$fresult
t= t+result$tdelta
}
result = list("tdelta" = t, "fresult" = apply(r,2,mean))
}
save(result, file=join(c(dir, file, "_",detector_name,".Rda")))
}
}
}
}
# Compute the ensembles for all the files and save the results in the data directory
compute_ensembles <-function(files, base_detector_methods, ensemble_methods, result_folder){
for(file in files){
dir <- paste(result_folder, file, "/" , sep="")
print(file)
print(dir)
result_list = validation::rda_to_list(file, base_detector_methods, path=dir)
result_list <- list()
for(detector_name in names(base_detector_methods)){
tryCatch({
load(paste(dir,file,"_",detector_name,".Rda", sep=""))
if(!any(is.na(result$fresult))){
result_list[[detector_name]] <- result$fresult
}
}, error=function(e){}, finally = {})
}
sapply(names(ensemble_methods), function(ensemble_name){
result <- validation:::benchmark(ensemble_methods[[ensemble_name]], list("lor"=result_list))
save(result, file=paste(dir, file, "_",ensemble_name,".Rda", sep=""))
})
}
}
# compute a matrix with all the auc and save the results in the data directory
compute_auc<-function(files, detector_methods, result_folder, data_folder){
auc_matrix = matrix(ncol = length(detector_methods), nrow=length(files))
colnames(auc_matrix) <- names(detector_methods)
rownames(auc_matrix) <- files
for(file in files){
dir <- paste(result_folder, file, "/" , sep="")
load(join(c(data_folder, file, ".Rda")))
for(detector_name in names(detector_methods)){
tryCatch({
load(join(c(dir, file, "_", detector_name, ".Rda")))
if(!any(is.na(result$fresult))){
auc_matrix[file,detector_name] <- pROC::roc(as.vector(data$y),result$fresult,auc=TRUE, direction="<")$auc
}
},error=function(e){
auc_matrix[file,detector_name] <- NA
}
)
}
save(auc_matrix, file=paste(result_folder, "AUC_matrix.Rda", sep=""))
}
}
# compute an array with all the proportion of outliers found and save the results in the data directory
compute_percent<-function(files, detector_methods, result_folder, data_folder, thresholds = c(0.01,0.05, 0.1)){
percent_array = array(
dim = c(length(files), length(detector_methods), length(thresholds)),
dimnames = list(files, names(detector_methods),thresholds)
)
for(file in files){
dir <- paste(result_folder, file, "/" , sep="")
load(join(c(data_folder, file, ".Rda")))
for(detector_name in names(detector_methods)){
tryCatch({
load(join(c(dir, file, "_", detector_name, ".Rda")))
for (threshold  in thresholds) {
percent_array[file,detector_name, toString(threshold)] <- validation:::correctely_detected(result$fresult, threshold, data$y)
}
},error=function(e){
percent_array[file,detector_name, toString(threshold)] <- NA
}
)
}
}
save(percent_array, file=paste(result_folder, "percent_array.Rda", sep=""))
}
# easier to use than paste
join <- function(vec, sep="", prefix=NULL, postfix=NULL){
paste(prefix, paste(vec, collapse=sep),postfix, sep="")
}
# redraw plots
draw_all_plots<-function(supervised_files, detector_methods, result_folder, data_folder, preprocess_method){
print(names(detector_methods))
for(file in supervised_files){
print(file)
dir <- paste(result_folder, file, "/" , sep="")
validation::roc_display(file, file, detector_methods, path = dir, origin=data_folder)
validation::pca_display(file, file, detector_methods, path = dir, origin = data_folder, preprocess_method=preprocess_method)
validation::boxplot_display(file, file, detector_methods, path = dir, origin=data_folder)
}
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data_folder = "data/converted/"
result_folder = "data/result/"
public_files <- c(
"cardio"
,"glass"
,"lympho"
,"wbc"
)
n_vec <- c(50, 200, 500)
d_vec <- c(10, 100, 1000)
k_sets = 10
thresholds <- c(0.01, 0.05, 0.10)
r_files <- NULL
mc_files <- NULL
mc_class_files <- NULL
classes <- c("class.a", "class.b")
for( n in n_vec){
for(d in d_vec){
for(i in 1:k_sets){
r_files<- c(r_files, join(c("r_", n, "_", d, "_", i)))
mc_files<- c(mc_files, join(c("mc_", n, "_", d, "_", i)))
for (c in classes){
mc_class_files<- c(mc_class_files, join(c("mc_", n, "_", d, "_", i,"_", c)))
}
}
}
}
supervised_files <- c(mc_files, r_files, public_files)
### Methods ####
base_detector_methods = list("boxplot"= outliers::box_plot_univariate,
"pca"= outliers::pca_score,
"one_class"=outliers::one_class_svm,
"two_phases_clustering"= outliers::two_phases_clustering,
"hclustering"= outliers::hclustering,
"pca_lof"= outliers::pca_lof,
"LOCI"=outliers::LOCI
)
# build the list of ensemble methods
ensemble_methods = list()
ensemble_methods[[paste("ensemble", "mean", "b", sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 0, 1, TRUE)
}
ensemble_methods[[paste("ensemble", "median", "b", sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 0, 1, TRUE)
}
ensemble_methods[[paste("ensemble", "max", "b", sep="-")]] <- function(lor){
outliers::ensemble_function(lor,max, 0, 1, TRUE)
}
ensemble_methods[[paste("ensemble", "mean", "c", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.2, FALSE)
}
ensemble_methods[[paste("ensemble", "mean", "c", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.3, FALSE)
}
ensemble_methods[[paste("ensemble", "mean", "c", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.4, FALSE)
}
ensemble_methods[[paste("ensemble", "median", "c", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.2, FALSE)
}
ensemble_methods[[paste("ensemble", "median", "c", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.3, FALSE)
}
ensemble_methods[[paste("ensemble", "median", "c", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.4, FALSE)
}
ensemble_methods[[paste("ensemble", "max", "c", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,max, 20, 0.2, FALSE)
}
ensemble_methods[[paste("ensemble", "max", "c", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,max, 20, 0.3, FALSE)
}
ensemble_methods[[paste("ensemble", "max", "c", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor, max, 20, 0.4, FALSE)
}
ensemble_methods[[paste("ensemble", "mean", "d", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.2, TRUE)
}
ensemble_methods[[paste("ensemble", "mean", "d", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.3, TRUE)
}
ensemble_methods[[paste("ensemble", "mean", "d", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,mean, 20, 0.4, TRUE)
}
ensemble_methods[[paste("ensemble", "median", "d", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.2, TRUE)
}
ensemble_methods[[paste("ensemble", "median", "d", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.3, TRUE)
}
ensemble_methods[[paste("ensemble", "median", "d", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,median, 20, 0.4, TRUE)
}
ensemble_methods[[paste("ensemble", "max", "d", 0.2, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,max, 20, 0.2, TRUE)
}
ensemble_methods[[paste("ensemble", "max", "d", 0.3, sep="-")]] <- function(lor){
outliers::ensemble_function(lor,max, 20, 0.3, TRUE)
}
ensemble_methods[[paste("ensemble", "max", "d", 0.4, sep="-")]] <- function(lor){
outliers::ensemble_function(lor, max, 20, 0.4, TRUE)
}
greedy_ensemble <- list()
greedy_ensemble[["greedy_ensemble-mean-b"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 0, 1, TRUE)
}
greedy_ensemble[["greedy_ensemble-median-b"]]  = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 0, 1, TRUE)
}
greedy_ensemble[["greedy_ensemble-max-b"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 0, 1, TRUE)
}
greedy_ensemble[["greedy_ensemble-mean-c-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.2, FALSE)
}
greedy_ensemble[["greedy_ensemble-mean-c-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.3, FALSE)
}
greedy_ensemble[["greedy_ensemble-mean-c-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.4, FALSE)
}
greedy_ensemble[["greedy_ensemble-mean-d-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.2, TRUE)
}
greedy_ensemble[["greedy_ensemble-mean-d-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.3, TRUE)
}
greedy_ensemble[["greedy_ensemble-mean-d-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,mean, 20, 0.4, TRUE)
}
greedy_ensemble[["greedy_ensemble-median-c-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.2, FALSE)
}
greedy_ensemble[["greedy_ensemble-median-c-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.3, FALSE)
}
greedy_ensemble[["greedy_ensemble-median-c-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.4, FALSE)
}
greedy_ensemble[["greedy_ensemble-median-d-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.2, TRUE)
}
greedy_ensemble[["greedy_ensemble-median-d-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.3, TRUE)
}
greedy_ensemble[["greedy_ensemble-median-d-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,median, 20, 0.4, TRUE)
}
greedy_ensemble[["greedy_ensemble-max-c-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.2, FALSE)
}
greedy_ensemble[["greedy_ensemble-max-c-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.3, FALSE)
}
greedy_ensemble[["greedy_ensemble-max-c-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.4, FALSE)
}
greedy_ensemble[["greedy_ensemble-max-d-0.2"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.2, TRUE)
}
greedy_ensemble[["greedy_ensemble-max-d-0.3"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.3, TRUE)
}
greedy_ensemble[["greedy_ensemble-max-d-0.4"]] = function(lor){
E = outliers::greedy_model_selection(lor)
outliers::ensemble_function(E,max, 20, 0.4, TRUE)
}
all_ensemble = unlist(list(ensemble_methods, greedy_ensemble))
# join the two list in one vector
detector_and_ensemble_methods = unlist(list(base_detector_methods,all_ensemble))
# preprocess_method
normalization_methods = c("no" , "boxcox" ,"asinh", "local_asinh")
pca_methods = c("no","basic")
bagging_methods = c("no","rd", "mi")
preprocess_methods = list()
for(normalization_method in normalization_methods){
for(pca_method in pca_methods){
preprocess_methods[[paste(normalization_method,pca_method, sep="_")]] <- function(x){
outliers::preprocessing(data=x, preprocess_method=normalization_method, pca=pca_method=="basic")
}
}
}
supervised_files
# cat("\014")
source("config.R")
gen_results <- function(normalization_methods, pca_methods, bagging_methods, files, base_detector_methods, ensemble_methods, data_folder, result_folder,only_missing = TRUE){
for(bagging_method in bagging_methods){
for(pca_method in pca_methods){
for(normalization_method in normalization_methods){
print(c(normalization_method, pca_method, bagging_method))
preprocess_name = join(c(normalization_method, "_", pca_method))
preprocessing_folder = join(c(result_folder, preprocess_name, "_", bagging_method, "/"))
preprocess_method <- preprocess_methods[[preprocess_name]]
# Compute the base detectors scores
compute_scores(files=files, base_detector_methods=base_detector_methods, data_folder = data_folder, result_folder = preprocessing_folder, preprocess_method=preprocess_method, bagging=bagging_method, only_missing=only_missing, timeout_meth = 30000000)
# Compute the ensembles scores
compute_ensembles(filesfiles, base_detector_methods=base_detector_methods, ensemble_methods =ensemble_methods, result_folder = preprocessing_folder )
# Compute the AUC matrix
compute_auc(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Compute the percent array
compute_percent(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Draw the ROC curves, the pca, and the score boxplots
draw_all_plots(supervised_files=files, detector_methods=ensemble_methods, result_folder = preprocessing_folder, data_folder = data_folder, preprocess_method = preprocess_method)
}
}
}
}
gen_results(
normalization_methods= "local_asinh" #normalization_methods
,pca_methods= "no"#pca_methods
,bagging_methods= "rd"#bagging_methods
,files=supervised_files[1:20]
,base_detector_methods=base_detector_methods
,ensemble_methods = all_ensemble
,data_folder = data_folder
,result_folder = result_folder
,only_missing=TRUE
)
install.packages("e1071")
# cat("\014")
source("config.R")
gen_results <- function(normalization_methods, pca_methods, bagging_methods, files, base_detector_methods, ensemble_methods, data_folder, result_folder,only_missing = TRUE){
for(bagging_method in bagging_methods){
for(pca_method in pca_methods){
for(normalization_method in normalization_methods){
print(c(normalization_method, pca_method, bagging_method))
preprocess_name = join(c(normalization_method, "_", pca_method))
preprocessing_folder = join(c(result_folder, preprocess_name, "_", bagging_method, "/"))
preprocess_method <- preprocess_methods[[preprocess_name]]
# Compute the base detectors scores
compute_scores(files=files, base_detector_methods=base_detector_methods, data_folder = data_folder, result_folder = preprocessing_folder, preprocess_method=preprocess_method, bagging=bagging_method, only_missing=only_missing, timeout_meth = 30000000)
# Compute the ensembles scores
compute_ensembles(filesfiles, base_detector_methods=base_detector_methods, ensemble_methods =ensemble_methods, result_folder = preprocessing_folder )
# Compute the AUC matrix
compute_auc(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Compute the percent array
compute_percent(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Draw the ROC curves, the pca, and the score boxplots
draw_all_plots(supervised_files=files, detector_methods=ensemble_methods, result_folder = preprocessing_folder, data_folder = data_folder, preprocess_method = preprocess_method)
}
}
}
}
gen_results(
normalization_methods= "local_asinh" #normalization_methods
,pca_methods= "no"#pca_methods
,bagging_methods= "rd"#bagging_methods
,files=supervised_files[1:20]
,base_detector_methods=base_detector_methods
,ensemble_methods = all_ensemble
,data_folder = data_folder
,result_folder = result_folder
,only_missing=TRUE
)
# cat("\014")
source("config.R")
gen_results <- function(normalization_methods, pca_methods, bagging_methods, files, base_detector_methods, ensemble_methods, data_folder, result_folder,only_missing = TRUE){
for(bagging_method in bagging_methods){
for(pca_method in pca_methods){
for(normalization_method in normalization_methods){
print(c(normalization_method, pca_method, bagging_method))
preprocess_name = join(c(normalization_method, "_", pca_method))
preprocessing_folder = join(c(result_folder, preprocess_name, "_", bagging_method, "/"))
preprocess_method <- preprocess_methods[[preprocess_name]]
# Compute the base detectors scores
compute_scores(files=files, base_detector_methods=base_detector_methods, data_folder = data_folder, result_folder = preprocessing_folder, preprocess_method=preprocess_method, bagging=bagging_method, only_missing=only_missing, timeout_meth = 30000000)
# Compute the ensembles scores
compute_ensembles(files = files, base_detector_methods=base_detector_methods, ensemble_methods =ensemble_methods, result_folder = preprocessing_folder )
# Compute the AUC matrix
compute_auc(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Compute the percent array
compute_percent(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Draw the ROC curves, the pca, and the score boxplots
draw_all_plots(supervised_files=files, detector_methods=ensemble_methods, result_folder = preprocessing_folder, data_folder = data_folder, preprocess_method = preprocess_method)
}
}
}
}
gen_results(
normalization_methods= "local_asinh" #normalization_methods
,pca_methods= "no"#pca_methods
,bagging_methods= "rd"#bagging_methods
,files=supervised_files[1:20]
,base_detector_methods=base_detector_methods
,ensemble_methods = all_ensemble
,data_folder = data_folder
,result_folder = result_folder
,only_missing=TRUE
)
install.packages("weights")
# cat("\014")
source("config.R")
gen_results <- function(normalization_methods, pca_methods, bagging_methods, files, base_detector_methods, ensemble_methods, data_folder, result_folder,only_missing = TRUE){
for(bagging_method in bagging_methods){
for(pca_method in pca_methods){
for(normalization_method in normalization_methods){
print(c(normalization_method, pca_method, bagging_method))
preprocess_name = join(c(normalization_method, "_", pca_method))
preprocessing_folder = join(c(result_folder, preprocess_name, "_", bagging_method, "/"))
preprocess_method <- preprocess_methods[[preprocess_name]]
# Compute the base detectors scores
compute_scores(files=files, base_detector_methods=base_detector_methods, data_folder = data_folder, result_folder = preprocessing_folder, preprocess_method=preprocess_method, bagging=bagging_method, only_missing=only_missing, timeout_meth = 30000000)
# Compute the ensembles scores
compute_ensembles(files = files, base_detector_methods=base_detector_methods, ensemble_methods =ensemble_methods, result_folder = preprocessing_folder )
# Compute the AUC matrix
compute_auc(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Compute the percent array
compute_percent(files=files, detector_methods = unlist(list(base_detector_methods, ensemble_methods)), result_folder = preprocessing_folder, data_folder = data_folder)
# Draw the ROC curves, the pca, and the score boxplots
draw_all_plots(supervised_files=files, detector_methods=ensemble_methods, result_folder = preprocessing_folder, data_folder = data_folder, preprocess_method = preprocess_method)
}
}
}
}
gen_results(
normalization_methods= "local_asinh" #normalization_methods
,pca_methods= "no"#pca_methods
,bagging_methods= "rd"#bagging_methods
,files=supervised_files[1:20]
,base_detector_methods=base_detector_methods
,ensemble_methods = all_ensemble
,data_folder = data_folder
,result_folder = result_folder
,only_missing=TRUE
)
warnings()
?e1071::svm
